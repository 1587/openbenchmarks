/**
@brief Documentation file for Mainpage, and defgroups.
@author Rick Foos at Solengtech dot Com
@file
*/

/**
@mainpage Openbenchmarks - Open Source Benchmark Collection

Openbenchmarks is a unique collection of open source benchmarks relevant to
Embedded Systems, Smart Phones, Networking Equipment, and more as we
move forward. 
Previous projects like this have gathered the source locations together, 
others have wrapped test harnesses around them, and a few of the more popular 
ones have been converted to rpms, and dpkgs as part of a linux distro.


None of the previous projects have addressed the issues that arise from wildly 
different source bases from different authors at different times. Many
have hooks for special research projects, specific hardware accelerators,
and makefiles for unique hardware or research compilers.
Others are written for bare metal operation and don't address portability to a wider base of platforms.


Packing benchmark source builds into rpm/dpkg formats is a generic way to solve
the problem, but it excludes a wide range of users.
Performance studies need a complete understanding and full disclosure of what was done.  
Embedded developers legitamitely need source code. They may not have a full port of timers to Linux, or worse broken timers requireing alternative hardware methods. 
Verification Engineers may need to run small blocks of code in RTL simulators.
Validation Engineers  
have new features in silicon that can only be tested by
performance differences, or measurements at a low level 
like a raw instruction stream in pipeline. 


Openbenchmarks shall operate from the original source, and wrap that source with
up to date build tools, and modernized packaging for embedded systems and
linux distributions. Openbenchmarks will not "throw away", or make it difficult
to see the original source code.
The source code of benchmarks will be available as originals, and as non-performance changing patches that can be independantly verified as such. 


Project Goals:
- Consistent build and porting with autotools;
- Recipes for Openembedded/OE-Core;
- Consistent execution scripts with Jenkins-CI support;
- Results parsed into csv/tsv spreadsheets; and
- Consistent baseline of Doxygen documentation.
 

Related Projects:
- Buildconf (autogen.sh)
- Doxygen
- Openembedded
- Linux Foundation Poky (OE-Core)
- Jenkins-CI

@section changes Changelog

The project is hosted on GitHub. It is a strong alternative to SourceForge, 
free to me, and provides a working Forge/Dashboard for software development.
That alone, having worked with customized GForge/Fusionforge is a load off
my mind. Can live with it, Can't live without it - best of both.

So to set thing up, Consistent build with buildconf, and Consistent 
documentation with Doxygen. Doxgyen is not supported well in GitHub. You 
are encouraged to use their Jekyll package. While this is good for the traditional web site to go along with source code, it does not document the source
code by changing comments in the source code. 
(See web, tangle, weave from TEX82) Not a new idea... 

*/

